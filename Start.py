# -*- coding: utf-8 -*-
import copy
import sys
import cv2 as cv
import numpy as np
import math
# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage
from PyQt5.QtWidgets import QFileDialog, QMainWindow, QApplication
from matplotlib import pyplot as plt


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1145, 906)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(33, 48, 271, 291))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.S_Image = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.S_Image.setText("")
        self.S_Image.setObjectName("S_Image")
        self.horizontalLayout.addWidget(self.S_Image)
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(570, 10, 247, 23))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.col = QtWidgets.QLabel(self.layoutWidget)
        self.col.setObjectName("col")
        self.horizontalLayout_3.addWidget(self.col)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_3.addWidget(self.lineEdit_2)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(120, 10, 247, 23))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.row = QtWidgets.QLabel(self.layoutWidget1)
        self.row.setObjectName("row")
        self.horizontalLayout_2.addWidget(self.row)
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_2.addWidget(self.lineEdit)
        self.R_Image = QtWidgets.QLabel(self.centralwidget)
        self.R_Image.setGeometry(QtCore.QRect(340, 68, 781, 791))
        self.R_Image.setText("")
        self.R_Image.setObjectName("R_Image")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1145, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menu_3)
        self.menu_4.setObjectName("menu_4")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("menu_5")
        self.menu_6 = QtWidgets.QMenu(self.menubar)
        self.menu_6.setObjectName("menu_6")
        self.menu_7 = QtWidgets.QMenu(self.menubar)
        self.menu_7.setObjectName("menu_7")
        self.menu_8 = QtWidgets.QMenu(self.menubar)
        self.menu_8.setObjectName("menu_8")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.OpenPicture = QtWidgets.QAction(MainWindow)
        self.OpenPicture.setObjectName("OpenPicture")
        self.Mid = QtWidgets.QAction(MainWindow)
        self.Mid.setObjectName("Mid")
        self.Average = QtWidgets.QAction(MainWindow)
        self.Average.setObjectName("Average")
        self.Max = QtWidgets.QAction(MainWindow)
        self.Max.setObjectName("Max")
        self.Min = QtWidgets.QAction(MainWindow)
        self.Min.setObjectName("Min")
        self.Laplace = QtWidgets.QAction(MainWindow)
        self.Laplace.setObjectName("Laplace")
        self.Big = QtWidgets.QAction(MainWindow)
        self.Big.setObjectName("Big")
        self.Small = QtWidgets.QAction(MainWindow)
        self.Small.setObjectName("Small")
        self.XuanZhuan = QtWidgets.QAction(MainWindow)
        self.XuanZhuan.setObjectName("XuanZhuan")
        self.Flip_horizontally = QtWidgets.QAction(MainWindow)
        self.Flip_horizontally.setObjectName("Flip_horizontally")
        self.Flip_vertically = QtWidgets.QAction(MainWindow)
        self.Flip_vertically.setObjectName("Flip_vertically")
        self.FanSe = QtWidgets.QAction(MainWindow)
        self.FanSe.setObjectName("FanSe")
        self.Swell = QtWidgets.QAction(MainWindow)
        self.Swell.setObjectName("Swell")
        self.Corrode = QtWidgets.QAction(MainWindow)
        self.Corrode.setObjectName("Corrode")
        self.Kai = QtWidgets.QAction(MainWindow)
        self.Kai.setObjectName("Kai")
        self.Bi = QtWidgets.QAction(MainWindow)
        self.Bi.setObjectName("Bi")
        self.ZhiFangTu = QtWidgets.QAction(MainWindow)
        self.ZhiFangTu.setObjectName("ZhiFangTu")
        self.Point = QtWidgets.QAction(MainWindow)
        self.Point.setObjectName("Point")
        self.Line = QtWidgets.QAction(MainWindow)
        self.Line.setObjectName("Line")
        self.Edge = QtWidgets.QAction(MainWindow)
        self.Edge.setObjectName("Edge")
        self.Threshold = QtWidgets.QAction(MainWindow)
        self.Threshold.setObjectName("Threshold")
        self.ZiDong_Threshold = QtWidgets.QAction(MainWindow)
        self.ZiDong_Threshold.setObjectName("ZiDong_Threshold")
        self.OSTU = QtWidgets.QAction(MainWindow)
        self.OSTU.setObjectName("OSTU")
        self.Area_Grow = QtWidgets.QAction(MainWindow)
        self.Area_Grow.setObjectName("Area_Grow")
        self.Add_Line = QtWidgets.QAction(MainWindow)
        self.Add_Line.setObjectName("Add_Line")
        self.Add_Rectangle = QtWidgets.QAction(MainWindow)
        self.Add_Rectangle.setObjectName("Add_Rectangle")
        self.Add_Circle = QtWidgets.QAction(MainWindow)
        self.Add_Circle.setObjectName("Add_Circle")
        self.action_23 = QtWidgets.QAction(MainWindow)
        self.action_23.setObjectName("action_23")
        self.Add_Chinese = QtWidgets.QAction(MainWindow)
        self.Add_Chinese.setObjectName("Add_Chinese")
        self.menu.addAction(self.OpenPicture)
        self.menu_2.addAction(self.Mid)
        self.menu_2.addAction(self.Average)
        self.menu_2.addAction(self.Max)
        self.menu_2.addAction(self.Min)
        self.menu_2.addAction(self.Laplace)
        self.menu_2.addAction(self.ZhiFangTu)
        self.menu_4.addAction(self.Flip_horizontally)
        self.menu_4.addAction(self.Flip_vertically)
        self.menu_3.addAction(self.Big)
        self.menu_3.addAction(self.Small)
        self.menu_3.addAction(self.XuanZhuan)
        self.menu_3.addAction(self.menu_4.menuAction())
        self.menu_3.addAction(self.FanSe)
        self.menu_5.addAction(self.Point)
        self.menu_5.addAction(self.Line)
        self.menu_5.addAction(self.Edge)
        self.menu_6.addAction(self.Swell)
        self.menu_6.addAction(self.Corrode)
        self.menu_6.addAction(self.Kai)
        self.menu_6.addAction(self.Bi)
        self.menu_7.addAction(self.Threshold)
        self.menu_7.addAction(self.ZiDong_Threshold)
        self.menu_7.addAction(self.OSTU)
        self.menu_7.addAction(self.Area_Grow)
        self.menu_8.addAction(self.Add_Line)
        self.menu_8.addAction(self.Add_Rectangle)
        self.menu_8.addAction(self.Add_Circle)
        self.menu_8.addAction(self.Add_Chinese)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_6.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())
        self.menubar.addAction(self.menu_7.menuAction())
        self.menubar.addAction(self.menu_8.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 点击按钮链接函数
        self.OpenPicture.triggered.connect(self.OpenImage)
        self.Big.triggered.connect(self.ToBig)
        self.Small.triggered.connect(self.ToSmall)
        self.Flip_horizontally.triggered.connect(self.To_Flip_horizontally)
        self.Flip_vertically.triggered.connect(self.To_Flip_vertically)
        self.FanSe.triggered.connect(self.To_FanSe)
        self.XuanZhuan.triggered.connect(self.To_XuanZhuan)
        self.Mid.triggered.connect(self.To_Mid)
        self.Average.triggered.connect(self.To_Average)
        self.Max.triggered.connect(self.To_Max)
        self.Min.triggered.connect(self.To_Min)
        self.Laplace.triggered.connect(self.To_Laplace)
        self.ZhiFangTu.triggered.connect(self.To_ZhiFangTu)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.col.setText(_translate("MainWindow", "列长："))
        self.row.setText(_translate("MainWindow", "行高："))
        self.menu.setTitle(_translate("MainWindow", "打开图片"))
        self.menu_2.setTitle(_translate("MainWindow", "平滑和锐化"))
        self.menu_3.setTitle(_translate("MainWindow", "图像缩放"))
        self.menu_4.setTitle(_translate("MainWindow", "翻转"))
        self.menu_5.setTitle(_translate("MainWindow", "检测"))
        self.menu_6.setTitle(_translate("MainWindow", "膨胀腐蚀"))
        self.menu_7.setTitle(_translate("MainWindow", "分割"))
        self.menu_8.setTitle(_translate("MainWindow", "添加"))
        self.OpenPicture.setText(_translate("MainWindow", "打开"))
        self.Mid.setText(_translate("MainWindow", "中值滤波"))
        self.Average.setText(_translate("MainWindow", "均值滤波"))
        self.Max.setText(_translate("MainWindow", "最大值滤波"))
        self.Min.setText(_translate("MainWindow", "最小值滤波"))
        self.Laplace.setText(_translate("MainWindow", "拉普拉斯算子"))
        self.Big.setText(_translate("MainWindow", "放大"))
        self.Small.setText(_translate("MainWindow", "缩小"))
        self.XuanZhuan.setText(_translate("MainWindow", "旋转"))
        self.Flip_horizontally.setText(_translate("MainWindow", "水平翻转"))
        self.Flip_vertically.setText(_translate("MainWindow", "垂直翻转"))
        self.FanSe.setText(_translate("MainWindow", "反色"))
        self.Swell.setText(_translate("MainWindow", "膨胀"))
        self.Corrode.setText(_translate("MainWindow", "腐蚀"))
        self.Kai.setText(_translate("MainWindow", "开运算"))
        self.Bi.setText(_translate("MainWindow", "闭运算"))
        self.ZhiFangTu.setText(_translate("MainWindow", "直方图均衡化"))
        self.Point.setText(_translate("MainWindow", "点"))
        self.Line.setText(_translate("MainWindow", "线"))
        self.Edge.setText(_translate("MainWindow", "边缘"))
        self.Threshold.setText(_translate("MainWindow", "阈值分割"))
        self.ZiDong_Threshold.setText(_translate("MainWindow", "全局自动阈值分割"))
        self.OSTU.setText(_translate("MainWindow", "OSTU"))
        self.Area_Grow.setText(_translate("MainWindow", "区域生长"))
        self.Add_Line.setText(_translate("MainWindow", "直线"))
        self.Add_Rectangle.setText(_translate("MainWindow", "矩形"))
        self.Add_Circle.setText(_translate("MainWindow", "圆"))
        self.action_23.setText(_translate("MainWindow", "字符"))
        self.Add_Chinese.setText(_translate("MainWindow", "文字"))


    def OpenImage(self):
        self.S_Image.setStyleSheet("")
        imgName, imgType = QFileDialog.getOpenFileName(self,
                                                       "打开图片",
                                                       "",
                                                       " *.jpg;;*.png;;*.jpeg;;*.bmp;;All Files (*)")
        # 利用qlabel显示图片
        png = QtGui.QPixmap(imgName).scaled(self.S_Image.width(), self.S_Image.height())
        global Image
        Image=qtpixmap_to_cvimg(png)
        self.S_Image.setPixmap(png)


    def ToBig(self):
        str1=self.lineEdit.text()
        str2=self.lineEdit_2.text()
        if len(str1)!=0 and len(str2)!=0:
            self.R_Image.setStyleSheet("")
            row = int(str1)
            col = int(str2)
            scrH, scrW, _ = Image.shape
            img2 = np.zeros((row, col,3), np.uint8)
            # 浅灰色背景
            img2.fill(200)
            for i in range(row-1):
                for j in range(col-1):
                    scrx = round(i * (scrH / row))
                    scry = round(j * (scrW / col))
                    img2[i, j] = Image[scrx, scry]
            img3=cvimg_to_qtimg(img2)
            self.R_Image.setPixmap(img3)


    def ToSmall(self):
        str1 = self.lineEdit.text()
        str2 = self.lineEdit_2.text()
        if len(str1) != 0 and len(str2) != 0:
            self.R_Image.setStyleSheet("")
            row = int(str1)
            col = int(str2)
            scrH, scrW, _ = Image.shape

            img2 = np.zeros((row, col, 3), np.uint8)
            # 浅灰色背景
            img2.fill(200)
            for i in range(row - 1):
                for j in range(col - 1):
                    scrx = round(i * (scrH / row))
                    scry = round(j * (scrW / col))
                    img2[i, j] = Image[scrx, scry]
            img3 = cvimg_to_qtimg(img2)
            self.R_Image.setPixmap(img3)

    # 水平翻转
    def To_Flip_horizontally(self):
        self.R_Image.setStyleSheet("")
        scrH, scrW, _ = Image.shape
        img = np.zeros((scrH,scrW,3),np.uint8)
        for i in range(scrH):
            for j in range(scrW):
                img[i,scrW-j-1]=Image[i,j]
        img2 = cvimg_to_qtimg(img)
        self.R_Image.setPixmap(img2)

    #垂直翻转
    def To_Flip_vertically(self):
        self.R_Image.setStyleSheet("")
        scrH, scrW, _ = Image.shape
        img = np.zeros((scrH, scrW, 3), np.uint8)
        for i in range(scrH):
            for j in range(scrW):
                img[scrH-i-1, j] = Image[i, j]
        img2 = cvimg_to_qtimg(img)
        self.R_Image.setPixmap(img2)

    #反色
    def To_FanSe(self):
        self.R_Image.setStyleSheet("")
        scrH, scrW, _ = Image.shape
        img = np.zeros((scrH, scrW, 3), np.uint8)
        for i in range(scrH):
            for j in range(scrW):
                img[i,j]=255-Image[i,j]
        img2 = cvimg_to_qtimg(img)
        self.R_Image.setPixmap(img2)

    #旋转
    def To_XuanZhuan(self):
        # 旋转中心坐标，逆时针旋转：-90°，缩放因子：1
        self.R_Image.setStyleSheet("")
        h, w = Image.shape[:2]
        center = (w // 2, h // 2)
        M_2 = cv.getRotationMatrix2D(center, 45, 1)
        img = cv.warpAffine(Image, M_2, (w, h))
        img2 = cvimg_to_qtimg(img)
        self.R_Image.setPixmap(img2)

    #中值滤波
    def To_Mid(self):
        self.R_Image.setStyleSheet("")
        scrH, scrW, _ = Image.shape
        img_median= np.zeros((scrH, scrW, 3), np.uint8)
        img_median = cv.medianBlur(Image, 3)
        img2 = cvimg_to_qtimg(img_median)
        self.R_Image.setPixmap(img2)

    #均值滤波
    def To_Average(self):
        self.R_Image.setStyleSheet("")
        scrH, scrW, _ = Image.shape
        img_Average=cv.blur(Image, (3,3))
        img2 = cvimg_to_qtimg(img_Average)
        self.R_Image.setPixmap(img2)

    #最大值滤波
    def To_Max(self):
        self.R_Image.setStyleSheet("")
        img0 = copy.copy(Image)
        scrH, scrW, _ = Image.shape
        img_Max = np.zeros((scrH, scrW, 3), np.uint8)
        for i in range(0, Image.shape[0]):
            for j in range(2, Image.shape[1]):
                for k in range(Image.shape[2]):
                    temp = original(i, j, k, 3, 3, img0)
                    img_Max[i, j, k] = np.max(temp)
        img2 = cvimg_to_qtimg(img_Max)
        self.R_Image.setPixmap(img2)

    #最小值滤波
    def To_Min(self):
        self.R_Image.setStyleSheet("")
        img0 = copy.copy(Image)
        scrH, scrW, _ = Image.shape
        img_Max = np.zeros((scrH, scrW, 3), np.uint8)
        for i in range(0, Image.shape[0]):
            for j in range(2, Image.shape[1]):
                for k in range(Image.shape[2]):
                    temp = original(i, j, k, 3, 3, img0)
                    img_Max[i, j, k] = np.min(temp)
        img2 = cvimg_to_qtimg(img_Max)
        self.R_Image.setPixmap(img2)

    #拉普拉斯锐化
    def To_Laplace(self):
        self.R_Image.setStyleSheet("")
        f=Image.copy()
        kernel1 = np.asarray([[0, -1, 0],
                              [-1, 5, -1],
                              [0, -1, 0]])
        dst = cv.filter2D(f, -1, kernel1)
        img2 = cvimg_to_qtimg(dst)
        self.R_Image.setPixmap(img2)

    #直方图均衡化
    def To_ZhiFangTu(self):
        self.R_Image.setStyleSheet("")
        img=cv.cvtColor(Image,cv.COLOR_BGR2GRAY)
        # 计算原图灰度直方图
        origin_histogram = Origin_histogram(img)
        # 直方图均衡化
        new_img = equalization_histogram(origin_histogram, img)

        origin_grayHist = GrayHist(img)
        equaliza_grayHist = GrayHist(new_img)
        x = np.arange(256)
        # 绘制灰度直方图
        plt.figure(num=1)
        plt.subplot(2, 2, 1)
        plt.plot(x, origin_grayHist, 'r', linewidth=2, c='black')
        plt.title("Origin")
        plt.ylabel("number of pixels")
        plt.subplot(2, 2, 2)
        plt.plot(x, equaliza_grayHist, 'r', linewidth=2, c='black')
        plt.title("Equalization")
        plt.ylabel("number of pixels")
        plt.subplot(2, 2, 3)
        plt.imshow(img, cmap=plt.cm.gray)
        plt.title('Origin')
        plt.subplot(2, 2, 4)
        plt.imshow(new_img, cmap=plt.cm.gray)
        plt.title('Equalization')
        plt.show()













#qt图片转化为opencv
def qtpixmap_to_cvimg(qtpixmap):

    qimg = qtpixmap.toImage()
    temp_shape = (qimg.height(), qimg.bytesPerLine() * 8 // qimg.depth())
    temp_shape += (4,)
    ptr = qimg.bits()
    ptr.setsize(qimg.byteCount())
    result = np.array(ptr, dtype=np.uint8).reshape(temp_shape)
    result = result[..., :3]

    return result
#opencv图片转化为qt
def cvimg_to_qtimg(cvimg):

    height, width, depth = cvimg.shape
    cvimg = cv.cvtColor(cvimg, cv.COLOR_BGR2RGB)
    cvimg = QImage(cvimg.data, width, height, width * depth, QImage.Format_RGB888)
    cvimg = QtGui.QPixmap(cvimg)
    return cvimg

def spilt(a):
    if a % 2 == 0:
        x1 = x2 = a / 2
    else:
        x1 = math.floor(a / 2)
        x2 = a - x1
    return -x1, x2

def original(i, j, k, a, b, img):
    x1, x2 = spilt(a)
    y1, y2 = spilt(b)
    temp = np.zeros(a * b)
    count = 0
    for m in range(x1, x2):
        for n in range(y1, y2):
            if i + m < 0 or i + m > img.shape[0] - 1 or j + n < 0 or j + n > img.shape[1] - 1:
                temp[count] = img[i, j, k]
            else:
                temp[count] = img[i + m, j + n, k]
            count += 1
    return temp

 # 建立原始图像各灰度级的灰度值与像素个数对应表
def Origin_histogram(img):

    histogram = {}
    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            k = img[i][j]
            if k in histogram:
                histogram[k] += 1
            else:
                histogram[k] = 1

    sorted_histogram = {}  # 建立排好序的映射表
    sorted_list = sorted(histogram)  # 根据灰度值进行从低至高的排序

    for j in range(len(sorted_list)):
        sorted_histogram[sorted_list[j]] = histogram[sorted_list[j]]

    return sorted_histogram

 # 建立概率分布映射表
def equalization_histogram(histogram, img):
    pr = {}

    for i in histogram.keys():
        pr[i] = histogram[i] / (img.shape[0] * img.shape[1])

    tmp = 0
    for m in pr.keys():
        tmp += pr[m]
        pr[m] = max(histogram) * tmp

    new_img = np.zeros(shape=(img.shape[0], img.shape[1]), dtype=np.uint8)

    for k in range(img.shape[0]):
        for l in range(img.shape[1]):
            new_img[k][l] = pr[img[k][l]]

    return new_img

# 计算灰度直方图
def GrayHist(img):

    height, width = img.shape[:2]
    grayHist = np.zeros([256], np.uint64)
    for i in range(height):
        for j in range(width):
            grayHist[img[i][j]] += 1
    return grayHist






class mywindow(QMainWindow,Ui_MainWindow):
    def __init__(self):
        super(mywindow,self).__init__()
        self.setupUi(self)
        self.retranslateUi(self)





if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = mywindow()
    window.show()
    sys.exit(app.exec_())

